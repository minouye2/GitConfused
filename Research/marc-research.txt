2/23/19
-Questions to bring up in Monday team meeting.
-Breaking down user stories into story points.
-Research on stacks in python.
Stack info:
http://interactivepython.org/courselib/static/pythonds/BasicDS/ImplementingaStackinPython.html

As a developer, I need to implement some of the integer operations because these are the easiest to start with.
Execute opcode integer operations.
Should this be in python or java (Since it is opcode does it matter?)

Implement integer operations:
opcodes to be implemented https://gouda.msudenver.edu/moodle/mod/assign/view.php?id=8558
Postfix?

As a developer, I will need to create the stack for operands because the JVM is a stack-oriented machine:

Push operands onto a stack.

As a developer, I will need to create simple Java files to test my integer operation implementation because I need to make sure I'm interpreting the opcodes correctly:

Was this meant to by a python file test? (It is a java file)

Using a dictionary to select functon to execute
https://stackoverflow.com/questions/9168340/using-a-dictionary-to-select-function-to-execute

def p1(args):
    whatever

def p2(more args):
    whatever

myDict = {
    "P1": p1,
    "P2": p2,
    ...
    "Pn": pn
}

def myMain(name):
    myDict[name]()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3/3/19
https://gist.github.com/tasdikrahman/2bdb3fb31136a3768fac

new_project
├── antigravity
│   ├── __init__.py         # make it a package
│   └── antigravity.py
└── test
    ├── __init__.py         # also make test a package
    └── test_antigravity.py

The example structure for the directory had the working module and tests parallel to each other.
I tried moving around the test folder so that it was inside jvpm but inside
GitConfused instead, the same directory as jvpm.  That was the jvpm_methods.py would
be in jvpm and the test for it, test_jvpm.py would be in the test location.

This ended up returning errors because the test module was unable to import the jvpm_methods.py
module.

GitConfused
├── jvpm
│   ├── __init__.py
│   └── jvpm_methods.py
└── test
    ├── __init__.py
    └── test_jvpm.py

For the unit testing itself we had to create a stack for each individual stack method.
Most of the examples had something like myFunction(input,expectedoutput).  Because our
methods do not actually take any inputs but just execute a different stack function, ie: Push
pop,peek, we had to create a local stack for the test method to interact with.
This included creating multiple stacks to test the different cases that the test
needed to account for.  Mostly just switching the variables around.  ishr (arithmetic shift right)
was a method that could not test.  Since the iconst only went up to 5 and we are
not using istore for this sprint we cannot test to see if the method works and includes
a sign extension.  This would require a 1 in the most significant bit which has the
smallest number for 8.

******************************************************************************************
3/11/19
For parsing the constant pool we know exactly which byte we need to pull.
This is because the constant pool always starts in the same position, similar to the
minor version, major version, and magic number.  The constant pool count is how we 
determine where the constant pool ends.  By taking the constant pool count and
subtracting one, we are able to get the number of items in the constant pool.  We then
need to set our parser to take the numbers from the start of the connstant pool and
then traverse the bytecode until we reach a number of bytes equal to the constant pool count
minus one.

Dissassembler: A disassembler is a software tool which transforms machine code 
into a human readable mnemonic representation called assembly language.

- This is what javap does when we make a .class file out of the .java file.
It takes the higher level code and converts it into bytecode that is readable
in order programming languages.

Constant pool:
I learned that the constant pool count is not just a number refering to the number
of bytes in the constant pool.  The constant pool is actually a collection of constant
pools that all have varying bytes.  As an example; if the first byte is a 01 then it 
refers to a string.  You then need to read the next two bytes to determine how many
bytes the string references. 

After determining how many total bytes there are across all constant pools we are
able to determine what the cpsize is.

cpsize = all bytes across all constant pools

From there we add parse past a few bytes of a determined size before coming across 
the next variable bytes.

*********************************************************************************
3/16/19
Need to figure out how to convert constant pool bytes into functions through python.

1 	2+x bytes
(variable) 	UTF-8 (Unicode) string: a character string prefixed by a 16-bit number (type u2) indicating the number of bytes in the encoded string which immediately follows (which may be different than the number of characters). Note that the encoding used is not actually UTF-8, but involves a slight modification of the Unicode standard encoding form. 	1.0.2
3 	4 bytes 	Integer: a signed 32-bit two's complement number in big-endian format 	1.0.2
4 	4 bytes 	Float: a 32-bit single-precision IEEE 754 floating-point number 	1.0.2
5 	8 bytes 	Long: a signed 64-bit two's complement number in big-endian format (takes two slots in the constant pool table) 	1.0.2
6 	8 bytes 	Double: a 64-bit double-precision IEEE 754 floating-point number (takes two slots in the constant pool table) 	1.0.2
7 	2 bytes 	Class reference: an index within the constant pool to a UTF-8 string containing the fully qualified class name (in internal format) (big-endian) 	1.0.2
8 	2 bytes 	String reference: an index within the constant pool to a UTF-8 string (big-endian too) 	1.0.2
9 	4 bytes 	Field reference: two indexes within the constant pool, the first pointing to a Class reference, the second to a Name and Type descriptor. (big-endian) 	1.0.2
10 	4 bytes 	Method reference: two indexes within the constant pool, the first pointing to a Class reference, the second to a Name and Type descriptor. (big-endian) 	1.0.2
11 	4 bytes 	Interface method reference: two indexes within the constant pool, the first pointing to a Class reference, the second to a Name and Type descriptor. (big-endian) 	1.0.2
12 	4 bytes 	Name and type descriptor: two indexes to UTF-8 strings within the constant pool, the first representing a name (identifier) and the second a specially encoded type descriptor. 	1.0.2
15 	3 bytes 	Method handle: this structure is used to represent a method handle and consists of one byte of type descriptor, followed by an index within the constant pool.[5] 	7
16 	2 bytes 	Method type: this structure is used to represent a method type, and consists of an index within the constant pool.[5] 	7
17 	4 bytes 	Dynamic: this is used to specify a dynamically computed constant produced by invocation of a bootstrap method.[5] 	11
18 	4 bytes 	InvokeDynamic: this is used by an invokedynamic instruction to specify a bootstrap method, the dynamic invocation name, the argument and return types of the call, and optionally, a sequence of additional constants called static arguments to the bootstrap method.[5] 	7
19 	2 bytes 	Module: this is used to identify a module.[5] 	9
20 	2 bytes 	Package: this is used to identify a package exported or opened by a module.[5]

Had a meeting through discord with Bob and Chris.  Bob explained how to view the output of his
get_cont_pool as a two dimensional array, a list of lists.  The way to access an individual byte
withing the array is to call the index for the first list and then additionally call
the index for the location of that lists byte.  So to get the first byte of the entire
array called temp you could call temp[0][0], for the second it would be temp[0][1] and so on.
The second index only works for the size of the individual constant pool and the first index
works for the index of the constant pool within the list of constant pools.  

My next assignment for this sprint is to finish the opcodes that were not included in the
first sprint.  This includes things like converting an integer into a byte, converting an integer
to a character, and other conversions of integers.  

As a side item I will try to draw up a pseudo representation of how we will be using
methods/functions to traverse the constant pool.  This includes a method that parses the
array list that Bob created and sub methods that will execute the specific tag byte
that is called.
*********************************************************************************
3/17/19

TODO:
i2b 	91 	value -> result 	convert an int into a byte
i2c 	92 	value -> result 	convert an int into a character
i2d 	87 	value -> result 	convert an int into a double
i2f 	86 	value -> result 	convert an int into a float
i2l 	85 	value -> result 	convert an int into a long
i2s 	93 	value -> result 	convert an int into a short

Research:

i2b: int to byte
https://www.delftstack.com/howto/python/how-to-convert-int-to-bytes-in-python-2-and-python-3/
Options for int to byte include three build in methods through python:

bytes()
struct.pack()
int.to_bytes()

bytes() is the fastest method with an execution time of 0.31296982169325455 s
int.to_bytes() takes the longest time with an execution time of 0.5622947660224895 s
The downside of the first method is that it only works on integers with a value
of 0-255.

i2c: int to character
https://docs.python.org/2/library/functions.html#chr

i2f: int to float
https://docs.python.org/2/library/functions.html#float

i2l: int to long
https://docs.python.org/2/library/functions.html#long

More info on int, float, long
https://docs.python.org/2/library/stdtypes.html#typesnumeric

Difference between a decimal, double, and float
http://net-informations.com/q/faq/float.html
decimal - 128 bit
long - 64 bit twos compliment
double - 64 bit
float - 32 bit

short -16 bit

i2s: int to short
i2l: int to long
https://docs.python.org/2/library/functions.html#hex
mask for short: 0xffff
mask for float: 0xffffffff

Issue with a double vs float 
https://stackoverflow.com/questions/6663272/double-precision-floating-values-in-python
"Python's built-in float type has double precision (it's a C double in CPython, 
a Java double in Jython). If you need more precision, get NumPy and use its numpy.float128."
-Fred Foo

This raises the question of how float() saves its values.
Does this mean that i2f and i2d are the same when read in python?

*******************************************************************************
3/31/19

Plans for Monday meeting
- Try to get down to just two branches (develop and master)
- Remove extra files that are no longer being used
- Consolidate methods

Merged branches and are now down to just develop and master.  Discussed that 
it was most efficient to start a sprint fresh so that we don't have people working
on older branches that are not up to date with develop.  Branching after the start
of the branch is still ok and encouraged so that people can test their changes
safely before merging back into develop.

Numpy was added to account for overflow.  What Numpy does is it converts a given
integer and converts it into a two's compliment signed bit.  Doing this removed the
need to run a mask on floats and shorts.  Within Numpy I ran the int function with its
corresponding number of bits to convert the given int into a specific word length.
16 for short, left as 32 for float, and 64 for double.

********************************************************************************
4/5/19

Clarification on the differences of short, double, long, and float.

https://www.b4x.com/android/forum/threads/short-vs-int-and-float-vs-double.16518/	

    In most of the threads I read including mine, I seldom see Short or Float used to DIM variables. Instead I see Int and Double, particularly when SHORT and FLOAT are sufficient. In the scheme of things, devices have more memory and are faster. Is that the reason? or is it insignificant that it does not make an impact. Can someone give a reason that substantiates using the correct one.

    Byte : 1byte signed: -128 to 127
    Char : 2bytes unsigned: 0 to 65535 : not all values are valid Unicode code points
    Short : 2bytes signed: -32768 to 32767
    Int : 4bytes signed: -2147483648 to 2147483647
    Long : 8bytes signed: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 (9.2...E+18)
    Float : 4bytes +/- 3.4e +/- 38 (~7 digits)
    Double : 8bytes +/- 1.7e +/- 308 (~15 digits

    Mahares
     
Numpy functions

https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html

bool_ 	Boolean (True or False) stored as a byte
int_ 	Default integer type (same as C long; normally either int64 or int32)
intc 	Identical to C int (normally int32 or int64)
intp 	Integer used for indexing (same as C ssize_t; normally either int32 or int64)
int8 	Byte (-128 to 127)
int16 	Integer (-32768 to 32767)
int32 	Integer (-2147483648 to 2147483647)
int64 	Integer (-9223372036854775808 to 9223372036854775807)
uint8 	Unsigned integer (0 to 255)
uint16 	Unsigned integer (0 to 65535)
uint32 	Unsigned integer (0 to 4294967295)
uint64 	Unsigned integer (0 to 18446744073709551615)
float_ 	Shorthand for float64.
float16 	Half precision float: sign bit, 5 bits exponent, 10 bits mantissa
float32 	Single precision float: sign bit, 8 bits exponent, 23 bits mantissa
float64 	Double precision float: sign bit, 11 bits exponent, 52 bits mantissa
complex_ 	Shorthand for complex128.
complex64 	Complex number, represented by two 32-bit floats (real and imaginary components)
complex128 	Complex number, represented by two 64-bit floats (real and imaginary components)

Mostly used int for signed integers and uint for unsigned integers.